/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package hr.crosig.proposal.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import hr.crosig.proposal.model.Proposal;
import hr.crosig.proposal.model.ProposalModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Proposal service. Represents a row in the &quot;AP_Proposal_Proposal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProposalModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProposalImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProposalImpl
 * @generated
 */
public class ProposalModelImpl
	extends BaseModelImpl<Proposal> implements ProposalModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a proposal model instance should use the <code>Proposal</code> interface instead.
	 */
	public static final String TABLE_NAME = "AP_Proposal_Proposal";

	public static final Object[][] TABLE_COLUMNS = {
		{"proposalId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"externalProposalNumber", Types.VARCHAR},
		{"lastUpdate", Types.TIMESTAMP}, {"origin", Types.VARCHAR},
		{"agentUserId", Types.BIGINT}, {"policyHolderExtNumber", Types.VARCHAR},
		{"insuredObjectExtNumber", Types.VARCHAR}, {"status", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("proposalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalProposalNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastUpdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("origin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agentUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("policyHolderExtNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insuredObjectExtNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AP_Proposal_Proposal (proposalId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,externalProposalNumber VARCHAR(75) null,lastUpdate DATE null,origin VARCHAR(75) null,agentUserId LONG,policyHolderExtNumber VARCHAR(75) null,insuredObjectExtNumber VARCHAR(75) null,status VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table AP_Proposal_Proposal";

	public static final String ORDER_BY_JPQL =
		" ORDER BY proposal.proposalId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AP_Proposal_Proposal.proposalId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AGENTUSERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROPOSALID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProposalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _proposalId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProposalId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _proposalId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Proposal.class;
	}

	@Override
	public String getModelClassName() {
		return Proposal.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Proposal, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Proposal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Proposal, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Proposal)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Proposal, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Proposal, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Proposal)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Proposal, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Proposal, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Proposal, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Proposal, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Proposal, Object>>();

			attributeGetterFunctions.put("proposalId", Proposal::getProposalId);
			attributeGetterFunctions.put("companyId", Proposal::getCompanyId);
			attributeGetterFunctions.put("userId", Proposal::getUserId);
			attributeGetterFunctions.put("userName", Proposal::getUserName);
			attributeGetterFunctions.put("createDate", Proposal::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Proposal::getModifiedDate);
			attributeGetterFunctions.put(
				"externalProposalNumber", Proposal::getExternalProposalNumber);
			attributeGetterFunctions.put("lastUpdate", Proposal::getLastUpdate);
			attributeGetterFunctions.put("origin", Proposal::getOrigin);
			attributeGetterFunctions.put(
				"agentUserId", Proposal::getAgentUserId);
			attributeGetterFunctions.put(
				"policyHolderExtNumber", Proposal::getPolicyHolderExtNumber);
			attributeGetterFunctions.put(
				"insuredObjectExtNumber", Proposal::getInsuredObjectExtNumber);
			attributeGetterFunctions.put("status", Proposal::getStatus);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Proposal, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Proposal, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Proposal, ?>>();

			attributeSetterBiConsumers.put(
				"proposalId",
				(BiConsumer<Proposal, Long>)Proposal::setProposalId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<Proposal, Long>)Proposal::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<Proposal, Long>)Proposal::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<Proposal, String>)Proposal::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Proposal, Date>)Proposal::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Proposal, Date>)Proposal::setModifiedDate);
			attributeSetterBiConsumers.put(
				"externalProposalNumber",
				(BiConsumer<Proposal, String>)
					Proposal::setExternalProposalNumber);
			attributeSetterBiConsumers.put(
				"lastUpdate",
				(BiConsumer<Proposal, Date>)Proposal::setLastUpdate);
			attributeSetterBiConsumers.put(
				"origin", (BiConsumer<Proposal, String>)Proposal::setOrigin);
			attributeSetterBiConsumers.put(
				"agentUserId",
				(BiConsumer<Proposal, Long>)Proposal::setAgentUserId);
			attributeSetterBiConsumers.put(
				"policyHolderExtNumber",
				(BiConsumer<Proposal, String>)
					Proposal::setPolicyHolderExtNumber);
			attributeSetterBiConsumers.put(
				"insuredObjectExtNumber",
				(BiConsumer<Proposal, String>)
					Proposal::setInsuredObjectExtNumber);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<Proposal, String>)Proposal::setStatus);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public long getProposalId() {
		return _proposalId;
	}

	@Override
	public void setProposalId(long proposalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proposalId = proposalId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getExternalProposalNumber() {
		if (_externalProposalNumber == null) {
			return "";
		}
		else {
			return _externalProposalNumber;
		}
	}

	@Override
	public void setExternalProposalNumber(String externalProposalNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalProposalNumber = externalProposalNumber;
	}

	@Override
	public Date getLastUpdate() {
		return _lastUpdate;
	}

	@Override
	public void setLastUpdate(Date lastUpdate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastUpdate = lastUpdate;
	}

	@Override
	public String getOrigin() {
		if (_origin == null) {
			return "";
		}
		else {
			return _origin;
		}
	}

	@Override
	public void setOrigin(String origin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_origin = origin;
	}

	@Override
	public long getAgentUserId() {
		return _agentUserId;
	}

	@Override
	public void setAgentUserId(long agentUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agentUserId = agentUserId;
	}

	@Override
	public String getAgentUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getAgentUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setAgentUserUuid(String agentUserUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAgentUserId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("agentUserId"));
	}

	@Override
	public String getPolicyHolderExtNumber() {
		if (_policyHolderExtNumber == null) {
			return "";
		}
		else {
			return _policyHolderExtNumber;
		}
	}

	@Override
	public void setPolicyHolderExtNumber(String policyHolderExtNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyHolderExtNumber = policyHolderExtNumber;
	}

	@Override
	public String getInsuredObjectExtNumber() {
		if (_insuredObjectExtNumber == null) {
			return "";
		}
		else {
			return _insuredObjectExtNumber;
		}
	}

	@Override
	public void setInsuredObjectExtNumber(String insuredObjectExtNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredObjectExtNumber = insuredObjectExtNumber;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Proposal.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Proposal toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Proposal>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProposalImpl proposalImpl = new ProposalImpl();

		proposalImpl.setProposalId(getProposalId());
		proposalImpl.setCompanyId(getCompanyId());
		proposalImpl.setUserId(getUserId());
		proposalImpl.setUserName(getUserName());
		proposalImpl.setCreateDate(getCreateDate());
		proposalImpl.setModifiedDate(getModifiedDate());
		proposalImpl.setExternalProposalNumber(getExternalProposalNumber());
		proposalImpl.setLastUpdate(getLastUpdate());
		proposalImpl.setOrigin(getOrigin());
		proposalImpl.setAgentUserId(getAgentUserId());
		proposalImpl.setPolicyHolderExtNumber(getPolicyHolderExtNumber());
		proposalImpl.setInsuredObjectExtNumber(getInsuredObjectExtNumber());
		proposalImpl.setStatus(getStatus());

		proposalImpl.resetOriginalValues();

		return proposalImpl;
	}

	@Override
	public Proposal cloneWithOriginalValues() {
		ProposalImpl proposalImpl = new ProposalImpl();

		proposalImpl.setProposalId(
			this.<Long>getColumnOriginalValue("proposalId"));
		proposalImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		proposalImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		proposalImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		proposalImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		proposalImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		proposalImpl.setExternalProposalNumber(
			this.<String>getColumnOriginalValue("externalProposalNumber"));
		proposalImpl.setLastUpdate(
			this.<Date>getColumnOriginalValue("lastUpdate"));
		proposalImpl.setOrigin(this.<String>getColumnOriginalValue("origin"));
		proposalImpl.setAgentUserId(
			this.<Long>getColumnOriginalValue("agentUserId"));
		proposalImpl.setPolicyHolderExtNumber(
			this.<String>getColumnOriginalValue("policyHolderExtNumber"));
		proposalImpl.setInsuredObjectExtNumber(
			this.<String>getColumnOriginalValue("insuredObjectExtNumber"));
		proposalImpl.setStatus(this.<String>getColumnOriginalValue("status"));

		return proposalImpl;
	}

	@Override
	public int compareTo(Proposal proposal) {
		long primaryKey = proposal.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Proposal)) {
			return false;
		}

		Proposal proposal = (Proposal)object;

		long primaryKey = proposal.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Proposal> toCacheModel() {
		ProposalCacheModel proposalCacheModel = new ProposalCacheModel();

		proposalCacheModel.proposalId = getProposalId();

		proposalCacheModel.companyId = getCompanyId();

		proposalCacheModel.userId = getUserId();

		proposalCacheModel.userName = getUserName();

		String userName = proposalCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			proposalCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			proposalCacheModel.createDate = createDate.getTime();
		}
		else {
			proposalCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			proposalCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			proposalCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		proposalCacheModel.externalProposalNumber = getExternalProposalNumber();

		String externalProposalNumber =
			proposalCacheModel.externalProposalNumber;

		if ((externalProposalNumber != null) &&
			(externalProposalNumber.length() == 0)) {

			proposalCacheModel.externalProposalNumber = null;
		}

		Date lastUpdate = getLastUpdate();

		if (lastUpdate != null) {
			proposalCacheModel.lastUpdate = lastUpdate.getTime();
		}
		else {
			proposalCacheModel.lastUpdate = Long.MIN_VALUE;
		}

		proposalCacheModel.origin = getOrigin();

		String origin = proposalCacheModel.origin;

		if ((origin != null) && (origin.length() == 0)) {
			proposalCacheModel.origin = null;
		}

		proposalCacheModel.agentUserId = getAgentUserId();

		proposalCacheModel.policyHolderExtNumber = getPolicyHolderExtNumber();

		String policyHolderExtNumber = proposalCacheModel.policyHolderExtNumber;

		if ((policyHolderExtNumber != null) &&
			(policyHolderExtNumber.length() == 0)) {

			proposalCacheModel.policyHolderExtNumber = null;
		}

		proposalCacheModel.insuredObjectExtNumber = getInsuredObjectExtNumber();

		String insuredObjectExtNumber =
			proposalCacheModel.insuredObjectExtNumber;

		if ((insuredObjectExtNumber != null) &&
			(insuredObjectExtNumber.length() == 0)) {

			proposalCacheModel.insuredObjectExtNumber = null;
		}

		proposalCacheModel.status = getStatus();

		String status = proposalCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			proposalCacheModel.status = null;
		}

		return proposalCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Proposal, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Proposal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Proposal, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Proposal)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Proposal>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Proposal.class, ModelWrapper.class);

	}

	private long _proposalId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _externalProposalNumber;
	private Date _lastUpdate;
	private String _origin;
	private long _agentUserId;
	private String _policyHolderExtNumber;
	private String _insuredObjectExtNumber;
	private String _status;

	public <T> T getColumnValue(String columnName) {
		Function<Proposal, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Proposal)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("proposalId", _proposalId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"externalProposalNumber", _externalProposalNumber);
		_columnOriginalValues.put("lastUpdate", _lastUpdate);
		_columnOriginalValues.put("origin", _origin);
		_columnOriginalValues.put("agentUserId", _agentUserId);
		_columnOriginalValues.put(
			"policyHolderExtNumber", _policyHolderExtNumber);
		_columnOriginalValues.put(
			"insuredObjectExtNumber", _insuredObjectExtNumber);
		_columnOriginalValues.put("status", _status);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("proposalId", 1L);

		columnBitmasks.put("companyId", 2L);

		columnBitmasks.put("userId", 4L);

		columnBitmasks.put("userName", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		columnBitmasks.put("externalProposalNumber", 64L);

		columnBitmasks.put("lastUpdate", 128L);

		columnBitmasks.put("origin", 256L);

		columnBitmasks.put("agentUserId", 512L);

		columnBitmasks.put("policyHolderExtNumber", 1024L);

		columnBitmasks.put("insuredObjectExtNumber", 2048L);

		columnBitmasks.put("status", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Proposal _escapedModel;

}